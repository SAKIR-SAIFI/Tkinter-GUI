---

## **1. Importing Libraries**

- `tkinter`: Provides tools for building the graphical user interface (GUI).
- `pygame`: A library for handling music playback (used for MP3 playback).
- `mutagen`: Extracts metadata (e.g., album artwork, track length) from MP3 files.
- `PIL (Pillow)`: Processes and resizes images for displaying album artwork.
- `io`: Handles byte streams for image processing.
- `random`: Used for shuffling tracks.
- `os`: Helps work with file paths and filenames.

---

## **2. Class: `UltimateMediaPlayer`**

This class encapsulates all the functionality of the media player. The `__init__` method initializes the application and sets up variables, Pygame mixer, and the GUI.

### **Attributes**
- **`playlist`**: A list of file paths for the music tracks added by the user.
- **`current_track_index`**: Keeps track of the currently playing song's index in the playlist.
- **`is_playing`**: Boolean to check whether a track is currently playing.
- **`is_shuffled`**: Boolean to enable or disable shuffle mode.
- **`repeat_mode`**: Integer (0: No repeat, 1: Repeat current track, 2: Repeat playlist).
- **`progress_var`**: A variable to track the progress bar's state.

---

## **3. Setting Up the GUI**

The `create_widgets()` method defines and arranges all the GUI elements:

1. **Artwork Display**:
   - A `tk.Label` widget shows the album artwork for the current track.

2. **Playlist Section**:
   - A `tk.Listbox` displays the list of tracks added to the playlist.

3. **Track Info**:
   - A label (`track_info_label`) displays the artist name and track title.

4. **Progress Bar**:
   - A `ttk.Scale` widget acts as the progress bar, showing the current playback position and allowing the user to seek within the track.

5. **Control Buttons**:
   - Buttons for "Play," "Pause," "Next," "Previous," "Shuffle," and "Repeat" are created and arranged using a loop for cleaner code.

6. **Volume Slider**:
   - A `ttk.Scale` widget lets the user adjust the playback volume.

7. **Load Files**:
   - A button (`load_button`) opens a file dialog to load MP3 files.

---

## **4. Binding Events**

The `create_bindings()` method links events to specific actions:
- Double-clicking a playlist entry starts playback of the selected track.
- Keyboard shortcuts:
  - **Space**: Toggles between play and pause.
  - **Right Arrow**: Skips to the next track.
  - **Left Arrow**: Goes to the previous track.

---

## **5. Core Functions**

### **Playlist Management**
- **`load_files()`**:
  - Opens a file dialog to select MP3 files.
  - Adds selected files to the playlist and updates the `tk.Listbox`.

- **`add_to_playlist(file_path)`**:
  - Adds a single file to the playlist if it's not already present.

### **Playing Music**
- **`play_music()`**:
  - Plays the selected track using Pygame's `mixer.music`.
  - Updates track metadata (artist, duration) and artwork.
  - Starts progress tracking to keep the UI synced with playback.

- **`pause_music()`**:
  - Pauses playback if a track is playing.

- **`play_pause()`**:
  - Toggles between play and pause states.

- **`next_track()`** and **`previous_track()`**:
  - Skips to the next or previous track in the playlist.
  - If shuffle mode is enabled, selects a random track.

---

### **Repeat and Shuffle**
- **`toggle_repeat()`**:
  - Cycles through repeat modes:
    - `0`: No repeat.
    - `1`: Repeat the current track.
    - `2`: Repeat the entire playlist.

- **`toggle_shuffle()`**:
  - Toggles shuffle mode on/off.

---

### **Volume and Progress**
- **`set_volume(value)`**:
  - Adjusts playback volume using the `pygame.mixer.music.set_volume()` method.

- **`seek_track(value)`**:
  - Seeks to a specific position in the current track when the progress bar is moved.

---

### **Metadata and Artwork**
- **`update_track_info(file_path)`**:
  - Reads metadata from the MP3 file using Mutagen.
  - Displays the artist name and track duration.

- **`update_artwork(file_path)`**:
  - Extracts album artwork from the MP3 file (if available).
  - Uses `Pillow` to resize the image and display it on the GUI.

---

### **Progress Tracking**
- **`start_progress_tracking()`**:
  - Updates the progress bar and current playback time every second.
  - Auto-advances to the next track when the current one finishes (based on `repeat_mode`).

---

### **Auto-Advance Logic**
- **`auto_next_track()`**:
  - Handles what happens when a track ends:
    - If `repeat_mode` is `1`, replay the same track.
    - If `repeat_mode` is `2`, move to the next track and loop back to the start if necessary.
    - If no repeat, stop playback.

---

## **6. Main Function**
The `main()` function creates the application window and initializes the `UltimateMediaPlayer` class. It starts the Tkinter event loop (`mainloop()`).

---

## **How the Code Works**
1. **Start the Application**:
   - Run the script to open the media player window.

2. **Load MP3 Files**:
   - Click "Load Files" to add music to the playlist.

3. **Play a Track**:
   - Double-click a track in the playlist or press "Play."
   - The track starts playing, and the album artwork, artist, and duration are displayed.

4. **Control Playback**:
   - Use buttons or keyboard shortcuts for playback, next/previous track, shuffle, and repeat.

5. **Adjust Volume**:
   - Use the volume slider to set playback volume.

6. **Seek Within a Track**:
   - Drag the progress bar to jump to a specific part of the track.

---

### **Whatâ€™s Missing?**
1. **Playlist Save/Load**:
   - The playlist is not saved between sessions.
2. **More File Formats**:
   - Only MP3 files are supported.
3. **Visual Feedback**:
   - Shuffle/repeat state changes could use visual indicators (like button color changes).

---
